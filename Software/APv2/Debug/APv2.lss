
APv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056d  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f6  00000000  00000000  000006f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  00000be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cd  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	
	UBRRH = 0; //data bits: 8 //baud:  9600
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103; //stop bits:  1 //parity:  No
  6e:	87 e6       	ldi	r24, 0x67	; 103
  70:	89 b9       	out	0x09, r24	; 9
	UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  72:	80 b5       	in	r24, 0x20	; 32
  74:	86 68       	ori	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  78:	8a b1       	in	r24, 0x0a	; 10
  7a:	88 69       	ori	r24, 0x98	; 152
  7c:	8a b9       	out	0x0a, r24	; 10
	
	PORTA = 0x00;
  7e:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a bb       	out	0x1a, r24	; 26
	
	DDRB = 0xff;
  84:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x02;
  86:	92 e0       	ldi	r25, 0x02	; 2
  88:	98 bb       	out	0x18, r25	; 24
	
	PORTC = 0x00;
  8a:	15 ba       	out	0x15, r1	; 21
	DDRC = 0xff;
  8c:	84 bb       	out	0x14, r24	; 20
	
	PORTD = 0x00;
  8e:	12 ba       	out	0x12, r1	; 18
	DDRD = 0xfe;
  90:	8e ef       	ldi	r24, 0xFE	; 254
  92:	81 bb       	out	0x11, r24	; 17
	
    /* Replace with your application code */
    while (1) 
    {
		
		PORTD ^= (1<<PD6);
  94:	90 e4       	ldi	r25, 0x40	; 64
  96:	82 b3       	in	r24, 0x12	; 18
  98:	89 27       	eor	r24, r25
  9a:	82 bb       	out	0x12, r24	; 18
    }
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0x2a>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
